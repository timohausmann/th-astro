---
import type { Project } from "../types/projects";
import { IconExternalLink } from "@tabler/icons-react";
import Button from "./Button.astro";
import { Image } from "astro:assets";
import Tags from "./Tags.astro";

interface Props {
    project: Project;
}

const { project } = Astro.props;

// Handle dynamic images
const images = await import.meta.glob<{ default: ImageMetadata }>(
    "/src/assets/partner/*.{jpeg,jpg,png,gif,svg}"
);

if (project.partner && !images[project.partner.logo])
    throw new Error(
        `"${project.partner.logo}" does not exist (ProjectDetailContent)`
    );

const partnerImg = project.partner
    ? await images[project.partner.logo]().then((img) => img.default)
    : null;
---

<div class="content">
    <p class="description">{project.description}</p>
    <ul class="dl">
        <li>
            <strong>Meine Rollen:</strong>
            <Tags tags={project.roles} />
        </li>
        <li>
            <strong>Technologien:</strong>
            <Tags tags={project.tech} />
        </li>
        {
            project.partner && partnerImg && (
                <li>
                    <strong>
                        {project.partner.title || "In Zusammenarbeit mit"}:
                    </strong>
                    <a
                        href={project.partner.href}
                        target="_blank"
                        class="partner-logo"
                    >
                        <Image
                            src={partnerImg}
                            alt={`${project.partner.name} Logo`}
                            width={partnerImg.width}
                            height={partnerImg.height}
                        />
                    </a>
                </li>
            )
        }
    </ul>
    {
        project.href && (
            <div class="href-mobile">
                <Button
                    href={project.href}
                    label="Besuchen"
                    blank
                >
                    <IconExternalLink size={20} stroke={1.5} slot="iconAfter" />
                </Button>
            </div>
        )
    }
</div>
<style>
    .content,
    .dl {
        display: flex;
        flex-direction: column;
        gap: 2rem;
    }
    .content {
        align-items: flex-start;
    }
    .description {
        font-size: 14px;
    }
    .content :global(.button) {
        color: var(--color-blue);
    }
    .content :global(.label) {
        font-weight: 400;
    }
    .content :global(.button::after) {
        background: rgba(255, 255, 255, 0.8);
    }
    .button .caps-14 {
        font-weight: 500;
    }
    .dl strong {
        display: block;
        margin-bottom: 0.5rem;
        font-size: 14px;
        font-weight: 500;
        color: var(--color-blue);
    }
    .partner-logo {
        display: inline-block;
        margin: 0.5rem;
        transition: transform 0.3s;
    }
    .partner-logo:hover {
        transform: scale(1.05);
    }
    @media (--projects-large) {
        .href-mobile {
            display: none;
        }
    }
</style>
