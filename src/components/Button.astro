---
export interface Props {
    label: string;
    href?: string;
    blank?: boolean;
    class?: string;
    type?: "button" | "submit" | "reset";
    module?: string;
}

const {
    label,
    href,
    blank = false,
    class: className,
    type = "button",
    module,
} = Astro.props;

// Determine if this should render as a link or button
const isLink = !!href;
---

{
    isLink ? (
        <a
            class={`button frost-bg ${className}`}
            href={href}
            target={blank ? "_blank" : "_self"}
            rel={blank ? "noopener noreferrer" : undefined}
            data-module={module}
        >
            <slot name="iconBefore" />
            <span class="label">{label}</span>
            <slot name="iconAfter" />
        </a>
    ) : (
        <button
            class={`button frost-bg ${className}`}
            type={type}
            data-module={module}
        >
            <slot name="iconBefore" />
            <span class="label">{label}</span>
            <slot name="iconAfter" />
        </button>
    )
}

<style>
    .button {
        position: relative;
        color: var(--color-blue);
        display: inline-flex;
        align-items: center;
        gap: 0.875rem;
        padding: 0.75rem 2rem;
        min-height: 3rem;
        text-decoration: none;
        line-height: 1;
        z-index: 1;
        transition: all 0.3s ease;
        border: none;
        border-radius: 9999px;
        cursor: pointer;
        font-family: inherit;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
    }

    .button:has([slot="iconBefore"]) {
        padding-left: 1.75rem;
    }

    .button:has([slot="iconAfter"]) {
        padding-right: 1.75rem;
    }

    .label {
        font-size: 14px;
        font-style: normal;
    }

    .button:focus {
        outline: 1px solid var(--color-blue);
    }
</style>

